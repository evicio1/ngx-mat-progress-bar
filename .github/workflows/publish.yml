name: Publish to npm

# 🔧 Workflow Configuration
# 🎯 Easy customization: Update these values to customize the workflow for different releases
# 📦 Library info is dynamically extracted from package.json (Angular version, package size, etc.)
# 🚀 Release notes are automatically generated with current Angular version information
env:
  LIBRARY_NAME: "ngx-mat-progress-bar"
  SCOPED_NAME: "@evicio1/ngx-mat-progress-bar"  # For GitHub Packages
  NODE_VERSION: "20.x"
  LIBRARY_PROJECT: "mat-progress-bar-library"
  
on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Trigger on version tags (v1.0.0, v20.0.0, etc.)
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to push tags
      packages: write  # Required for npm publishing
      id-token: write  # Required for npm provenance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Install dependencies
        run: npm ci

      - name: Build the library
        run: npm run build -- --project=${{ env.LIBRARY_PROJECT }}

      - name: Get package information
        id: package_info
        run: |
          # If triggered by a tag, extract version from tag name
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            CURRENT_VERSION="${{ github.ref_name }}"
            CURRENT_VERSION="${CURRENT_VERSION#v}"  # Remove 'v' prefix
            echo "Using version from tag: $CURRENT_VERSION"
          else
            CURRENT_VERSION=$(node -p "require('./projects/${{ env.LIBRARY_PROJECT }}/package.json').version")
            echo "Using version from package.json: $CURRENT_VERSION"
          fi
          
          ANGULAR_VERSION=$(node -p "require('./package.json').dependencies['@angular/core']")
          PACKAGE_SIZE=$(du -sh projects/${{ env.LIBRARY_PROJECT }} | cut -f1)
          
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "angular_version=$ANGULAR_VERSION" >> $GITHUB_OUTPUT
          echo "package_size=$PACKAGE_SIZE" >> $GITHUB_OUTPUT
          echo "is_tag_trigger=$([[ "${{ github.ref }}" == refs/tags/v* ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          
          echo "Package Version: $CURRENT_VERSION"
          echo "Angular Version: $ANGULAR_VERSION"
          echo "Package Size: $PACKAGE_SIZE"
          echo "Triggered by tag: $([[ "${{ github.ref }}" == refs/tags/v* ]] && echo 'true' || echo 'false')"

      - name: Check if version exists on npm
        id: check_version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          CURRENT_VERSION="${{ steps.package_info.outputs.version }}"
          echo "Checking if version $CURRENT_VERSION exists on npm..."

          # Check if the version exists on npm
          if npm view ${{ env.LIBRARY_NAME }}@$CURRENT_VERSION version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "❌ Version $CURRENT_VERSION already exists on npm"

            # Get the latest version and suggest next version
            LATEST_VERSION=$(npm view ${{ env.LIBRARY_NAME }} version)
            echo "Latest version on npm: $LATEST_VERSION"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version $CURRENT_VERSION does not exist on npm, proceeding with publish"
          fi

      - name: Stop if version exists
        if: steps.check_version.outputs.exists == 'true'
        run: |
          echo "❌ Cannot publish: Version ${{ steps.package_info.outputs.version }} already exists on npm"
          echo "Please update the version in projects/${{ env.LIBRARY_PROJECT }}/package.json"
          echo "Current version: ${{ steps.package_info.outputs.version }}"
          LATEST_VERSION=$(npm view ${{ env.LIBRARY_NAME }} version)
          echo "Latest version on npm: $LATEST_VERSION"
          exit 1

      - name: Verify npm auth
        if: steps.check_version.outputs.exists == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm -v
          node -v
          npm whoami

      - name: Copy additional files to dist
        if: steps.check_version.outputs.exists == 'false'
        run: |
          cp README.md dist/${{ env.LIBRARY_PROJECT }}/
          cp LICENSE dist/${{ env.LIBRARY_PROJECT }}/

      - name: Show package info
        if: steps.check_version.outputs.exists == 'false'
        run: |
          echo "Publishing package info:"
          cd dist/${{ env.LIBRARY_PROJECT }}
          cat package.json | jq '{name, version, repository}'
          echo "Package contents:"
          ls -la

      - name: Publish to npm
        if: steps.check_version.outputs.exists == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd dist/${{ env.LIBRARY_PROJECT }}
          # Remove any problematic git references
          rm -rf .git 2>/dev/null || true
          npm publish --access public

      - name: Check if tag already exists
        if: steps.check_version.outputs.exists == 'false'
        id: check_tag
        run: |
          PUBLISHED_VERSION=$(node -p "require('./dist/${{ env.LIBRARY_PROJECT }}/package.json').version")
          if git rev-parse "v$PUBLISHED_VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v$PUBLISHED_VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v$PUBLISHED_VERSION does not exist"
          fi

      - name: Create and push git tag
        if: steps.check_version.outputs.exists == 'false' && success() && steps.check_tag.outputs.exists == 'false'
        id: create_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PUBLISHED_VERSION=$(node -p "require('./dist/${{ env.LIBRARY_PROJECT }}/package.json').version")
          echo "Creating and pushing tag v$PUBLISHED_VERSION"
          git tag "v$PUBLISHED_VERSION"
          git remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }}.git
          git push origin "v$PUBLISHED_VERSION"
          echo "tag_name=v$PUBLISHED_VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        if: steps.check_version.outputs.exists == 'false' && success() && steps.check_tag.outputs.exists == 'false'
        id: release_notes
        run: |
          VERSION="${{ steps.package_info.outputs.version }}"
          ANGULAR_VERSION="${{ steps.package_info.outputs.angular_version }}"
          PACKAGE_SIZE="${{ steps.package_info.outputs.package_size }}"
          
          # Extract major version from Angular version (e.g., "^20.3.2" -> "20")
          ANGULAR_MAJOR=$(echo $ANGULAR_VERSION | sed 's/[^0-9]*\([0-9]\+\).*/\1/')
          
          echo "Generating release notes for version $VERSION"

          # Create dynamic release notes
          cat > release_notes.md << EOF
          ## 🚀 ${{ env.LIBRARY_NAME }} v$VERSION

          ### What's New in This Release
          - Enhanced Angular Material Progress Bar component
          - Built with Angular $ANGULAR_VERSION (Angular $ANGULAR_MAJOR)
          - Optimized for modern Angular applications without animation dependencies
          - Published to npm: https://www.npmjs.com/package/${{ env.LIBRARY_NAME }}

          ### 🎯 Key Features
          - 🎨 Built with Angular Material Design components
          - 🚀 Global progress indicator for HTTP requests
          - ⚡ Programmatic control (start, stop, set progress)
          - 🎛️ Multiple progress bar modes (determinate, indeterminate, buffer, query)
          - 🎨 Customizable styling and positioning
          - ♿ Full accessibility support with ARIA attributes
          - 📱 Responsive design for all device sizes
          - 🔄 HTTP interceptor for automatic request tracking

          ### 📦 Installation
          \`\`\`bash
          npm install ${{ env.LIBRARY_NAME }}@$VERSION
          \`\`\`

          ### 🛠️ Requirements
          - Angular $ANGULAR_MAJOR+ (any $ANGULAR_MAJOR.x version)
          - Angular Material $ANGULAR_MAJOR+
          - Angular CDK $ANGULAR_MAJOR+
          - Node.js 18+ (recommended)

          ### 📊 Package Information
          - **Package Size**: $PACKAGE_SIZE
          - **Angular Version**: $ANGULAR_VERSION
          - **TypeScript**: Latest compatible version
          - **Dependencies**: Minimal (tslib ^2.3.0)

          ### 🔗 Links
          - 📦 [NPM Package](https://www.npmjs.com/package/${{ env.LIBRARY_NAME }})
          - 📚 [Documentation & Usage Guide](https://github.com/${{ github.repository }}#readme)
          - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
          - 💡 [Feature Requests](https://github.com/${{ github.repository }}/discussions)

          ### 📝 Changelog
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
          EOF

          echo "Release notes created for Angular $ANGULAR_MAJOR"

      - name: Create package tarball
        if: steps.check_version.outputs.exists == 'false' && success()
        run: |
          cd dist/${{ env.LIBRARY_PROJECT }}
          npm pack
          TARBALL_NAME=$(ls *.tgz)
          echo "tarball_name=$TARBALL_NAME" >> $GITHUB_ENV
          echo "Created tarball: $TARBALL_NAME"

      - name: Create GitHub Release
        if: steps.check_version.outputs.exists == 'false' && success() && (steps.check_tag.outputs.exists == 'false' || steps.package_info.outputs.is_tag_trigger == 'true')
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.package_info.outputs.is_tag_trigger == 'true' && github.ref_name || steps.create_tag.outputs.tag_name }}
          name: "🚀 ngx-mat-progress-bar v${{ steps.package_info.outputs.version }}"
          body_path: release_notes.md
          files: |
            dist/${{ env.LIBRARY_PROJECT }}/*.tgz
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Setup Node.js for GitHub Packages
        if: steps.check_version.outputs.exists == 'false' && success()
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@evicio1'

      - name: Publish to GitHub Packages
        if: steps.check_version.outputs.exists == 'false' && success()
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd dist/${{ env.LIBRARY_PROJECT }}

          # Update package.json for GitHub Packages
          jq '.name = "${{ env.SCOPED_NAME }}"' package.json > temp.json && mv temp.json package.json

          echo "Publishing to GitHub Packages..."
          npm publish --access public